// Generated by dts-bundle v0.7.3

declare module 'schemion' {
    type TypeMap = {
        string: string;
        number: number;
        boolean: boolean;
        object: object;
        function: Function;
        undefined: undefined;
        any: any;
        symbol: symbol;
    };
    type Schema = keyof TypeMap | Schema[] | {
        [key: string]: Schema;
    };
    type MatchResult<T> = T extends keyof TypeMap ? TypeMap[T] : T extends Schema[] ? MatchResult<T[number]>[] : T extends {
        [key: string]: Schema;
    } ? {
        [K in keyof T]: MatchResult<T[K]>;
    } : never;
    export function matches<T extends Schema>(o: unknown, schema: T, defaults?: T extends object ? {
        [P in keyof T]?: MatchResult<T[P]>;
    } | undefined : undefined, { shouldValidateSchema, }?: {
        shouldValidateSchema?: boolean;
    }): o is MatchResult<T>;
    export {};
}

